{"version":3,"names":["NativeEventEmitter","NativeModules","Platform","BILoggerEmitter","addListener","event","listener","context","removeListener","removeAllListeners","LoggerEventEmitter","BiSdkReactNative","LINKING_ERROR","select","ios","default","EmbeddedNativeModules","Proxy","get","Error"],"sources":["EmbeddedNativeModules.tsx"],"sourcesContent":["import { NativeEventEmitter, NativeModules, Platform } from 'react-native';\n\nimport type { Passkey, Success } from './EmbeddedTypes';\n\nclass BILoggerEmitter extends NativeEventEmitter {\n  addListener(\n    event: 'BeyondIdentityLogger',\n    listener: (...args: any[]) => any,\n    context?: any\n  ) {\n    return super.addListener(event, listener, context);\n  }\n  removeListener(event: 'BeyondIdentityLogger') {\n    return super.removeAllListeners(event);\n  }\n}\n\nconst LoggerEventEmitter = new BILoggerEmitter(NativeModules.BiSdkReactNative);\n\nconst LINKING_ERROR =\n  `The package 'bi-sdk-react-native' doesn't seem to be linked. Make sure: \\n\\n` +\n  Platform.select({ ios: \"- You have run 'pod install'\\n\", default: '' }) +\n  '- You rebuilt the app after installing the package\\n' +\n  '- You are not using Expo Go managed workflow\\n';\n\nconst EmbeddedNativeModules: EmbeddedNativeModules =\n  NativeModules.BiSdkReactNative\n    ? NativeModules.BiSdkReactNative\n    : new Proxy(\n        {},\n        {\n          get() {\n            throw new Error(LINKING_ERROR);\n          },\n        }\n      );\n\n/// Types below represent models passed from Native layer to React.\n/// These modesl do no contain optional values, as empty strings would be passed instead.\ninterface NativeAuthenticateResponse {\n  redirectUrl: string;\n  message: string;\n}\n\ninterface NativeBindPasskeyResponse {\n  passkey: Passkey;\n  postBindingRedirectUri: string;\n}\n\ninterface EmbeddedNativeModules {\n  authenticate(\n    url: string,\n    passkeyId: string\n  ): Promise<NativeAuthenticateResponse>;\n  bindPasskey(url: string): Promise<NativeBindPasskeyResponse>;\n  deletePasskey(id: string): Promise<string>;\n  getPasskeys(): Promise<Passkey[]>;\n  initialize(\n    allowedDomains: string[],\n    biometricAskPrompt: string\n  ): Promise<Success>;\n  isAuthenticateUrl(url: string): Promise<boolean>;\n  isBindPasskeyUrl(url: string): Promise<boolean>;\n}\n\nexport { EmbeddedNativeModules, LoggerEventEmitter, BILoggerEmitter };\n"],"mappings":"AAAA,SAASA,kBAAkB,EAAEC,aAAa,EAAEC,QAAQ,QAAQ,cAAc;AAI1E,MAAMC,eAAe,SAASH,kBAAkB,CAAC;EAC/CI,WAAW,CACTC,KAA6B,EAC7BC,QAAiC,EACjCC,OAAa,EACb;IACA,OAAO,KAAK,CAACH,WAAW,CAACC,KAAK,EAAEC,QAAQ,EAAEC,OAAO,CAAC;EACpD;EACAC,cAAc,CAACH,KAA6B,EAAE;IAC5C,OAAO,KAAK,CAACI,kBAAkB,CAACJ,KAAK,CAAC;EACxC;AACF;AAEA,MAAMK,kBAAkB,GAAG,IAAIP,eAAe,CAACF,aAAa,CAACU,gBAAgB,CAAC;AAE9E,MAAMC,aAAa,GAChB,8EAA6E,GAC9EV,QAAQ,CAACW,MAAM,CAAC;EAAEC,GAAG,EAAE,gCAAgC;EAAEC,OAAO,EAAE;AAAG,CAAC,CAAC,GACvE,sDAAsD,GACtD,gDAAgD;AAElD,MAAMC,qBAA4C,GAChDf,aAAa,CAACU,gBAAgB,GAC1BV,aAAa,CAACU,gBAAgB,GAC9B,IAAIM,KAAK,CACP,CAAC,CAAC,EACF;EACEC,GAAG,GAAG;IACJ,MAAM,IAAIC,KAAK,CAACP,aAAa,CAAC;EAChC;AACF,CAAC,CACF;;AAEP;AACA;;AA2BA,SAASI,qBAAqB,EAAEN,kBAAkB,EAAEP,eAAe"}
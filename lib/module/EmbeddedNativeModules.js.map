{"version":3,"sources":["EmbeddedNativeModules.tsx"],"names":["NativeEventEmitter","NativeModules","Platform","BIEventEmitter","addListener","event","listener","context","removeListener","BILoggerEmitter","ExtendCredentialsEventEmitter","BiSdkReactNative","LoggerEventEmitter","LINKING_ERROR","select","ios","default","EmbeddedNativeModules","Proxy","get","Error"],"mappings":"AAAA,SAASA,kBAAT,EAA6BC,aAA7B,EAA4CC,QAA5C,QAA4D,cAA5D;;AACA,MAAMC,cAAN,SAA6BH,kBAA7B,CAAgD;AAC9CI,EAAAA,WAAW,CACTC,KADS,EAETC,QAFS,EAGTC,OAHS,EAIT;AACA,WAAO,MAAMH,WAAN,CAAkBC,KAAlB,EAAyBC,QAAzB,EAAmCC,OAAnC,CAAP;AACD;;AACDC,EAAAA,cAAc,CACZH,KADY,EAEZC,QAFY,EAGZ;AACA,WAAO,MAAME,cAAN,CAAqBH,KAArB,EAA4BC,QAA5B,CAAP;AACD;;AAb6C;;AAgBhD,MAAMG,eAAN,SAA8BT,kBAA9B,CAAiD;AAC/CI,EAAAA,WAAW,CACTC,KADS,EAETC,QAFS,EAGTC,OAHS,EAIT;AACA,WAAO,MAAMH,WAAN,CAAkBC,KAAlB,EAAyBC,QAAzB,EAAmCC,OAAnC,CAAP;AACD;;AACDC,EAAAA,cAAc,CAACH,KAAD,EAAkBC,QAAlB,EAAqD;AACjE,WAAO,MAAME,cAAN,CAAqBH,KAArB,EAA4BC,QAA5B,CAAP;AACD;;AAV8C;;AAajD,MAAMI,6BAA6B,GAAG,IAAIP,cAAJ,CACpCF,aAAa,CAACU,gBADsB,CAAtC;AAGA,MAAMC,kBAAkB,GAAG,IAAIH,eAAJ,CAAoBR,aAAa,CAACU,gBAAlC,CAA3B;AAEA,MAAME,aAAa,GAChB,8EAAD,GACAX,QAAQ,CAACY,MAAT,CAAgB;AAAEC,EAAAA,GAAG,EAAE,gCAAP;AAAyCC,EAAAA,OAAO,EAAE;AAAlD,CAAhB,CADA,GAEA,sDAFA,GAGA,6CAJF;AAMA,MAAMC,qBAA4C,GAChDhB,aAAa,CAACU,gBAAd,GACIV,aAAa,CAACU,gBADlB,GAEI,IAAIO,KAAJ,CACE,EADF,EAEE;AACEC,EAAAA,GAAG,GAAG;AACJ,UAAM,IAAIC,KAAJ,CAAUP,aAAV,CAAN;AACD;;AAHH,CAFF,CAHN;AAiIA,SACEI,qBADF,EAGEd,cAHF,EAIEM,eAJF,EASEC,6BATF,EAUEE,kBAVF","sourcesContent":["import { NativeEventEmitter, NativeModules, Platform } from 'react-native';\nclass BIEventEmitter extends NativeEventEmitter {\n  addListener(\n    event: ExtendCredentialsEvents,\n    listener: (...args: any[]) => any,\n    context?: any\n  ) {\n    return super.addListener(event, listener, context);\n  }\n  removeListener(\n    event: ExtendCredentialsEvents,\n    listener: (...args: any[]) => any\n  ) {\n    return super.removeListener(event, listener);\n  }\n}\n\nclass BILoggerEmitter extends NativeEventEmitter {\n  addListener(\n    event: 'Logger',\n    listener: (...args: any[]) => any,\n    context?: any\n  ) {\n    return super.addListener(event, listener, context);\n  }\n  removeListener(event: 'Logger', listener: (...args: any[]) => any) {\n    return super.removeListener(event, listener);\n  }\n}\n\nconst ExtendCredentialsEventEmitter = new BIEventEmitter(\n  NativeModules.BiSdkReactNative\n);\nconst LoggerEventEmitter = new BILoggerEmitter(NativeModules.BiSdkReactNative);\n\nconst LINKING_ERROR =\n  `The package 'bi-sdk-react-native' doesn't seem to be linked. Make sure: \\n\\n` +\n  Platform.select({ ios: \"- You have run 'pod install'\\n\", default: '' }) +\n  '- You rebuilt the app after installing the package\\n' +\n  '- You are not using Expo managed workflow\\n';\n\nconst EmbeddedNativeModules: EmbeddedNativeModules =\n  NativeModules.BiSdkReactNative\n    ? NativeModules.BiSdkReactNative\n    : new Proxy(\n        {},\n        {\n          get() {\n            throw new Error(LINKING_ERROR);\n          },\n        }\n      );\n\ninterface AuthorizationCode {\n  /**\n   * An authorization code grant used to exchange for an access token.\n   */\n  authorizationCode: string;\n}\n\n/**\n * A User Credential. Think of this as a wrapper around an X.509 Certificate.\n */\ninterface Credential {\n  /**\n   * The human-readable display name of the Credential.\n   */\n  name: string;\n  /**\n   * The certificate chain of the Credential in PEM-guarded X509 format.\n   */\n  chain: string[];\n  /**\n   * The date the Credential was created.\n   */\n  create: string;\n  /**\n   * The uri of your app's sign up screen. This is where the user would register with your service.\n   */\n  enrollURI?: string;\n  /**\n   * The handle for the `Credential`. This is identical to your `tenant_id`.\n   */\n  handle: string;\n  /**\n   * The enclave key handle. This handle is used to identify a private key in the T2 enclave or keychain.\n   */\n  keyHandle: string;\n  /**\n   * The uri of your company or app's logo.\n   */\n  logoURL: string;\n  /**\n   * The uri of your app's sign in screen. This is where the user would authenticate into your app.\n   */\n  loginURI?: string;\n  /**\n   * The SHA256 hash of the root certificate as a base64 encoded string.\n   */\n  rootFingerprint: string;\n}\n/**\n * Possible extend events to listen for on the `Embedded.extendCredentialsEventEmitter` after calling `Embedded.extendCredentials`\n */\ntype ExtendCredentialsEvents =\n  | 'ExtendCredentialAborted'\n  | 'ExtendTokenReceived'\n  | 'ExtendCredentialCompleted'\n  | 'ExtendError';\n\n/**\n * Proof Key for Code Exchange (PKCE, pronounced \"pixy\") used by public clients to mitigate authorization code interception attack.\n */\ninterface PKCE {\n  /**\n   * A one-time high-entropy cryptographic random String used to correlate the authorization request to the token request\n   */\n  codeVerifier: string;\n  /**\n   * Derived from the `codeVerifier`. Send to the authorization request, to be verified against later.\n   */\n  codeChallenge: string;\n  /**\n   * A method that was used to derive the `codeChallenge` suchs as S256.\n   */\n  codeChallengeMethod: string;\n}\n\ntype Success = 'success';\n\ninterface TokenResponse {\n  /**\n   * OAuth token grant\n   */\n  accessToken: string;\n  /**\n   * OIDC JWT token grant\n   */\n  idToken: string;\n  /**\n   * AccessToken type such as \"Bearer\"\n   */\n  tokenType: string;\n  /**\n   * AccessToken expiration\n   */\n  expiresIn: number;\n}\n\ninterface EmbeddedNativeModules {\n  authorize(\n    pkceCodeChallenge: string,\n    pkceCodeChallengeMethod: string,\n    scope: string\n  ): Promise<AuthorizationCode>;\n  authenticate(): Promise<TokenResponse>;\n  cancelExtendCredentials(): Promise<Success>;\n  createPKCE(): Promise<PKCE>;\n  deleteCredential(handle: string): Promise<string>;\n  extendCredentials(handles: string[]): void;\n  getCredentials(): Promise<Credential[]>;\n  initialize(\n    biometricAskPrompt: string,\n    clientID: string,\n    redirectURI: string\n  ): void;\n  registerCredentialsWithToken(token: string): Promise<Credential[]>;\n  registerCredentialsWithUrl(url: string): Promise<Credential>;\n}\n\nexport {\n  EmbeddedNativeModules,\n  AuthorizationCode,\n  BIEventEmitter,\n  BILoggerEmitter,\n  TokenResponse,\n  Success,\n  PKCE,\n  ExtendCredentialsEvents,\n  ExtendCredentialsEventEmitter,\n  LoggerEventEmitter,\n  Credential,\n};\n"]}
{"version":3,"names":["EmbeddedNativeModules","LoggerEventEmitter","Embedded","authenticate","url","passkeyId","Promise","resolve","reject","then","response","toAuthenticateResponse","catch","authenticateOtp","email","bindPasskey","toBindPasskeyResponse","deletePasskey","id","getAuthenticationContext","toAuthenticationContext","getPasskeys","initialize","biometricAskPrompt","allowedDomains","isAuthenticateUrl","isBindPasskeyUrl","logEventEmitter","redeemOtp","otp","authUrl","application","displayName","undefined","origin","sourceIp","userAgent","geolocation","referer","redirectUrl","message","passkeyBindingToken","passkey","postBindingRedirectUri"],"sources":["index.ts"],"sourcesContent":["import {\n  BILoggerEmitter,\n  EmbeddedNativeModules,\n  LoggerEventEmitter,\n  NativeAuthenticationContext,\n  NativeAuthenticateResponse,\n  NativeBindPasskeyResponse,\n} from './EmbeddedNativeModules';\n\nimport type {\n  AuthenticationContext,\n  AuthenticateResponse,\n  BindPasskeyResponse,\n  OtpChallengeResponse,\n  Passkey,\n  Success,\n} from './EmbeddedTypes';\n\ninterface Embedded {\n  /**\n   * Authenticate a user and receive an `AuthenticateResponse`.\n   * @param url The authentication URL of the current transaction.\n   * @param passkeyId the ID of the passkey with which to authenticate.\n   */\n  authenticate(url: string, passkeyId: string): Promise<AuthenticateResponse>;\n\n  /**\n   * Initiates authentication using an OTP, which will be sent to the provided email address.\n   * @param url The authentication URL of the current transaction.\n   * @param email The email address where the OTP will be sent.\n   */\n  authenticateOtp(url: string, email: string): Promise<OtpChallengeResponse>;\n\n  /**\n   * Bind a passkey to a device.\n   * @param url the URL used to bind a passkey to a device.\n   */\n  bindPasskey(url: string): Promise<BindPasskeyResponse>;\n\n  /**\n   * Delete a passkey by ID.\n   * @note it is possible to delete a passkey that does not exist.\n   * @warning deleting a passkey is destructive and will remove everything from the device. If no other device contains the passkey then the user will need to complete a recovery in order to log in again on this device.\n   * @param id the the passkey id, uniquely identifying a `Passkey`.\n   */\n  deletePasskey(id: string): Promise<string>;\n\n  /**\n   * Get all current passkeys for this device.\n   */\n  getPasskeys(): Promise<Passkey[]>;\n\n  /**\n   * Get the Authentication Context for the current transaction.\n   *\n   * The Authentication Context contains the Authenticator Config, Authentication Method Configuration, request origin, and the authenticating application.\n   * This is used to retrieve authentication parameters for an ongoing transaction.\n   * @param url The authentication URL of the current transaction.\n   */\n  getAuthenticationContext(url: string): Promise<AuthenticationContext>;\n\n  /**\n   * Initialize the SDK. This must be called before any other functions are called.\n   * Note: Hot reloading will not call this function again. If changes have been made to calling this function, fully reload the app to see those changes.\n   * @param biometricAskPrompt A prompt the user will see when asked for biometrics.\n   * @param allowedDomains An optional array of whitelisted domains for network operations. This will default to Beyond Identityâ€™s allowed domains when not provided or is empty.\n   */\n  initialize(\n    biometricAskPrompt: string,\n    allowedDomains?: string[]\n  ): Promise<Success>;\n\n  /**\n   * Returns whether a URL is a valid Authenticate URL or not.\n   * @param url The URL in question.\n   */\n  isAuthenticateUrl(url: string): Promise<boolean>;\n\n  /**\n   * Returns whether a URL is a valid Bind Passkey URL or not.\n   * @param url The URL in question.\n   */\n  isBindPasskeyUrl(url: string): Promise<boolean>;\n\n  /**\n   * A NativeEventEmitter to listen for `Logger` events after calling `Embedded.initialize`\n   */\n  logEventEmitter: BILoggerEmitter;\n\n  /**\n   * Redeems an OTP for a grant code.\n   *\n   * Returns a promise that resolves to an `AuthenticateResponse` on success\n   * or an `OtpChallengeResponse` on failure to authenticate with the provided OTP code.\n   * Use the url provided in `OtpChallengeResponse` for retry.\n   * @param url The authentication URL of the current transaction.\n   * @param otp The OTP to redeem.\n   */\n  redeemOtp(\n    url: string,\n    otp: string\n  ): Promise<AuthenticateResponse | OtpChallengeResponse>;\n}\n\nconst Embedded: Embedded = {\n  authenticate(url: string, passkeyId: string): Promise<AuthenticateResponse> {\n    return new Promise(function (resolve, reject) {\n      EmbeddedNativeModules.authenticate(url, passkeyId)\n        .then((response) => resolve(toAuthenticateResponse(response)))\n        .catch(reject);\n    });\n  },\n  authenticateOtp(url, email): Promise<OtpChallengeResponse> {\n    return new Promise(function (resolve, reject) {\n      EmbeddedNativeModules.authenticateOtp(url, email)\n        .then(resolve)\n        .catch(reject);\n    });\n  },\n  bindPasskey(url: string): Promise<BindPasskeyResponse> {\n    return new Promise(function (resolve, reject) {\n      EmbeddedNativeModules.bindPasskey(url)\n        .then((response) => resolve(toBindPasskeyResponse(response)))\n        .catch(reject);\n    });\n  },\n  deletePasskey(id: string): Promise<string> {\n    return EmbeddedNativeModules.deletePasskey(id);\n  },\n  getAuthenticationContext(url: string): Promise<AuthenticationContext> {\n    return new Promise(function (resolve, reject) {\n      EmbeddedNativeModules.getAuthenticationContext(url)\n        .then((response) => resolve(toAuthenticationContext(response)))\n        .catch(reject);\n    });\n  },\n  getPasskeys(): Promise<Passkey[]> {\n    return EmbeddedNativeModules.getPasskeys();\n  },\n  initialize(\n    biometricAskPrompt: string,\n    allowedDomains: string[] = []\n  ): Promise<Success> {\n    return EmbeddedNativeModules.initialize(allowedDomains, biometricAskPrompt);\n  },\n  isAuthenticateUrl(url: string): Promise<boolean> {\n    return EmbeddedNativeModules.isAuthenticateUrl(url);\n  },\n  isBindPasskeyUrl(url: string): Promise<boolean> {\n    return EmbeddedNativeModules.isBindPasskeyUrl(url);\n  },\n  logEventEmitter: LoggerEventEmitter,\n  redeemOtp(\n    url: string,\n    otp: string\n  ): Promise<AuthenticateResponse | OtpChallengeResponse> {\n    return new Promise(function (resolve, reject) {\n      EmbeddedNativeModules.redeemOtp(url, otp)\n        .then((response) => {\n          if ('redirectUrl' in response) {\n            resolve(toAuthenticateResponse(response));\n          }\n          if ('url' in response) {\n            resolve(response);\n          }\n        })\n        .catch(reject);\n    });\n  },\n};\n\nfunction toAuthenticationContext(\n  response: NativeAuthenticationContext\n): AuthenticationContext {\n  return {\n    authUrl: response.authUrl,\n    application: {\n      id: response.application.id,\n      displayName: response.application.displayName || undefined, // checking for empty string from native bridge\n    },\n    origin: {\n      sourceIp: response.origin.sourceIp || undefined, // checking for empty string from native bridge\n      userAgent: response.origin.userAgent || undefined, // checking for empty string from native bridge\n      geolocation: response.origin.geolocation || undefined, // checking for empty string from native bridge\n      referer: response.origin.referer || undefined, // checking for empty string from native bridge\n    },\n  };\n}\n\nfunction toAuthenticateResponse(\n  response: NativeAuthenticateResponse\n): AuthenticateResponse {\n  return {\n    redirectUrl: response.redirectUrl,\n    message: response.message || undefined, // checking for empty string from native bridge\n    passkeyBindingToken: response.passkeyBindingToken || undefined, // checking for empty string from native bridge\n  };\n}\n\nfunction toBindPasskeyResponse(\n  response: NativeBindPasskeyResponse\n): BindPasskeyResponse {\n  return {\n    passkey: response.passkey,\n    postBindingRedirectUri: response.postBindingRedirectUri || undefined, // checking for empty string from native bridge\n  };\n}\n\nexport { Embedded };\nexport * from './EmbeddedTypes';\n"],"mappings":"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"}
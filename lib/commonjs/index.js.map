{"version":3,"sources":["index.tsx"],"names":["Embedded","authenticate","url","credentialID","Promise","resolve","reject","EmbeddedNativeModules","then","response","redirectURL","message","undefined","catch","bindCredential","credential","postBindingRedirectURI","deleteCredential","id","getCredentials","initialize","biometricAskPrompt","allowedDomains","isAuthenticateUrl","isBindCredentialUrl","logEventEmitter","LoggerEventEmitter"],"mappings":";;;;;;;AAAA;;AAyEA,MAAMA,QAAkB,GAAG;AACzBC,EAAAA,YAAY,CACVC,GADU,EAEVC,YAFU,EAGqB;AAC/B,WAAO,IAAIC,OAAJ,CAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AAC5CC,mDAAsBN,YAAtB,CAAmCC,GAAnC,EAAwCC,YAAxC,EACGK,IADH,CACSC,QAAD,IACJJ,OAAO,CAAC;AACNK,QAAAA,WAAW,EAAED,QAAQ,CAACC,WADhB;AAENC,QAAAA,OAAO,EAAEF,QAAQ,CAACE,OAAT,IAAoBC,SAFvB,CAEkC;;AAFlC,OAAD,CAFX,EAOGC,KAPH,CAOSP,MAPT;AAQD,KATM,CAAP;AAUD,GAfwB;;AAgBzBQ,EAAAA,cAAc,EAAE,UAAUZ,GAAV,EAAwD;AACtE,WAAO,IAAIE,OAAJ,CAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AAC5CC,mDAAsBO,cAAtB,CAAqCZ,GAArC,EACGM,IADH,CACSC,QAAD,IACJJ,OAAO,CAAC;AACNU,QAAAA,UAAU,EAAEN,QAAQ,CAACM,UADf;AAENC,QAAAA,sBAAsB,EACpBP,QAAQ,CAACO,sBAAT,IAAmCJ,SAH/B,CAG0C;;AAH1C,OAAD,CAFX,EAQGC,KARH,CAQSP,MART;AASD,KAVM,CAAP;AAWD,GA5BwB;AA6BzBW,EAAAA,gBAAgB,EAAE,UAAUC,EAAV,EAAuC;AACvD,WAAOX,6CAAsBU,gBAAtB,CAAuCC,EAAvC,CAAP;AACD,GA/BwB;AAgCzBC,EAAAA,cAAc,EAAE,YAAmC;AACjD,WAAOZ,6CAAsBY,cAAtB,EAAP;AACD,GAlCwB;AAmCzBC,EAAAA,UAAU,EAAE,UACVC,kBADU,EAEVC,cAAwB,GAAG,EAFjB,EAGQ;AAClB,WAAOf,6CAAsBa,UAAtB,CAAiCE,cAAjC,EAAiDD,kBAAjD,CAAP;AACD,GAxCwB;;AAyCzBE,EAAAA,iBAAiB,CAACrB,GAAD,EAAgC;AAC/C,WAAOK,6CAAsBgB,iBAAtB,CAAwCrB,GAAxC,CAAP;AACD,GA3CwB;;AA4CzBsB,EAAAA,mBAAmB,CAACtB,GAAD,EAAgC;AACjD,WAAOK,6CAAsBiB,mBAAtB,CAA0CtB,GAA1C,CAAP;AACD,GA9CwB;;AA+CzBuB,EAAAA,eAAe,EAAEC;AA/CQ,CAA3B","sourcesContent":["import {\n  EmbeddedNativeModules,\n  LoggerEventEmitter,\n  BILoggerEmitter,\n} from './EmbeddedNativeModules';\n\nimport type {\n  AuthenticateResponse,\n  BindCredentialResponse,\n  Credential,\n  CredentialState,\n  Success,\n} from './EmbeddedTypes';\n\ninterface Embedded {\n  /**\n   * Authenticate a user and receive an `AuthenticateResponse`.\n   * @param url the url used to authenticate.\n   * @param credentialID the `id` of the Credential with which to authenticate.\n   */\n  authenticate(\n    url: string,\n    credentialID: string\n  ): Promise<AuthenticateResponse>;\n\n  /**\n   * Bind a credential to a device.\n   * @param url the url used to bind a credential to a device.\n   */\n  bindCredential(url: string): Promise<BindCredentialResponse>;\n\n  /**\n   * Delete a Credential by ID.\n   * @warning deleting a Credential is destructive and will remove everything from the device. If no other device contains the credential then the user will need to complete a recovery in order to log in again on this device.\n   * @param id the unique identifier of the Credential.\n   */\n  deleteCredential(id: string): Promise<string>;\n\n  /**\n   * Get all current credentials.\n   * Only one credential per device is currently supported.\n   */\n  getCredentials(): Promise<Credential[]>;\n\n  /**\n   * Initialize the SDK. This must be called before any other functions are called.\n   * Note: Hot reloading will not call this function again. If changes have been made to calling this function, fully reload the app to see those changes.\n   * @param biometricAskPrompt A prompt the user will see when asked for biometrics.\n   * @param allowedDomains An optional array of whitelisted domains for network operations. This will default to Beyond Identityâ€™s allowed domains when not provided or is empty.\n   */\n  initialize(\n    biometricAskPrompt: string,\n    allowedDomains?: string[]\n  ): Promise<Success>;\n\n  /**\n   * Determines if a URL is a valid Authenticate URL.\n   * @param url The URL in question.\n   */\n  isAuthenticateUrl(url: string): Promise<boolean>;\n\n  /**\n   * Determines if a URL is a valid Bind Credentail URL.\n   * @param url The URL in question.\n   */\n  isBindCredentialUrl(url: string): Promise<boolean>;\n\n  /**\n   * A NativeEventEmitter to listen for `Logger` events after calling `Embedded.initialize`\n   */\n  logEventEmitter: BILoggerEmitter;\n}\n\nconst Embedded: Embedded = {\n  authenticate(\n    url: string,\n    credentialID: string\n  ): Promise<AuthenticateResponse> {\n    return new Promise(function (resolve, reject) {\n      EmbeddedNativeModules.authenticate(url, credentialID)\n        .then((response) =>\n          resolve({\n            redirectURL: response.redirectURL,\n            message: response.message || undefined, // checking for empty string from native bridge\n          })\n        )\n        .catch(reject);\n    });\n  },\n  bindCredential: function (url: string): Promise<BindCredentialResponse> {\n    return new Promise(function (resolve, reject) {\n      EmbeddedNativeModules.bindCredential(url)\n        .then((response) =>\n          resolve({\n            credential: response.credential,\n            postBindingRedirectURI:\n              response.postBindingRedirectURI || undefined, // checking for empty string from native bridge\n          })\n        )\n        .catch(reject);\n    });\n  },\n  deleteCredential: function (id: string): Promise<string> {\n    return EmbeddedNativeModules.deleteCredential(id);\n  },\n  getCredentials: function (): Promise<Credential[]> {\n    return EmbeddedNativeModules.getCredentials();\n  },\n  initialize: function (\n    biometricAskPrompt: string,\n    allowedDomains: string[] = []\n  ): Promise<Success> {\n    return EmbeddedNativeModules.initialize(allowedDomains, biometricAskPrompt);\n  },\n  isAuthenticateUrl(url: string): Promise<boolean> {\n    return EmbeddedNativeModules.isAuthenticateUrl(url);\n  },\n  isBindCredentialUrl(url: string): Promise<boolean> {\n    return EmbeddedNativeModules.isBindCredentialUrl(url);\n  },\n  logEventEmitter: LoggerEventEmitter,\n};\n\nexport { AuthenticateResponse, Credential, CredentialState, Embedded, Success };\n"]}